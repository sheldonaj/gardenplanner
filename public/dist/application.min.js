"use strict";var ApplicationConfiguration=function(){var applicationModuleName="meansample",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("gardens"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("lvlDraggable",["$rootScope","uuid",function($rootScope,uuid){return{restrict:"A",link:function(scope,el){angular.element(el).attr("draggable","true");var id=angular.element(el).attr("id");id||(id=uuid.new(),angular.element(el).attr("id",id)),el.bind("dragstart",function(e){e.dataTransfer.setData("text",id),$rootScope.$emit("LVL-DRAG-START")}),el.bind("dragend",function(){$rootScope.$emit("LVL-DRAG-END")})}}}]),angular.module("core").directive("lvlDropTarget",["$rootScope","uuid",function($rootScope,uuid){return{restrict:"A",scope:{onDrop:"&"},link:function(scope,el){var id=angular.element(el).attr("id");id||(id=uuid.new(),angular.element(el).attr("id",id)),el.bind("dragover",function(e){return e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.dataTransfer.dropEffect="move",!1}),el.bind("dragenter",function(e){angular.element(e.target).addClass("lvl-over")}),el.bind("dragleave",function(e){angular.element(e.target).removeClass("lvl-over")}),el.bind("drop",function(e){e.preventDefault&&e.preventDefault(),e.stopPropogation&&e.stopPropogation();var data=e.dataTransfer.getData("text"),dest=document.getElementById(id),src=document.getElementById(data),destEl=angular.element(dest),srcEl=angular.element(src),myscope=destEl.scope();destEl.attr("src",srcEl.attr("src"));var plant=srcEl.attr("src"),squareId=myscope.square.id;scope.onDrop({dragPlant:plant,dropId:squareId})}),$rootScope.$on("LVL-DRAG-START",function(){var el=document.getElementById(id);angular.element(el).addClass("lvl-target")}),$rootScope.$on("LVL-DRAG-END",function(){var el=document.getElementById(id);angular.element(el).removeClass("lvl-target"),angular.element(el).removeClass("lvl-over")})}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("uuid",function(){var svc={"new":function(){function _p8(s){var p=(Math.random().toString(16)+"000000000").substr(2,8);return s?"-"+p.substr(0,4)+"-"+p.substr(4,4):p}return _p8()+_p8(!0)+_p8(!0)+_p8()},empty:function(){return"00000000-0000-0000-0000-000000000000"}};return svc}),angular.module("gardens").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Gardens","gardens","dropdown","/gardens(/create)?"),Menus.addSubMenuItem("topbar","gardens","List Gardens","gardens"),Menus.addSubMenuItem("topbar","gardens","New Garden","gardens/create")}]),angular.module("gardens").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGardens",{url:"/gardens",templateUrl:"modules/gardens/views/list-gardens.client.view.html"}).state("createGarden",{url:"/gardens/create",templateUrl:"modules/gardens/views/create-garden.client.view.html"}).state("viewGarden",{url:"/gardens/:gardenId",templateUrl:"modules/gardens/views/view-garden.client.view.html"}).state("editGarden",{url:"/gardens/:gardenId/edit",templateUrl:"modules/gardens/views/edit-garden.client.view.html"})}]),angular.module("gardens").controller("GardensController",["$scope","$stateParams","$location","$http","Authentication","Gardens",function($scope,$stateParams,$location,$http,Authentication,Gardens){$scope.authentication=Authentication,$http.get("plants/").success(function(data){$scope.plants=data});var emptysquare="/modules/gardens/img/empty.jpg";$scope.onlyIntegers=/^\-?\d+$/,$scope.garden={width:1,length:1,rows:[]};var gardenSquare={id:1,plant:emptysquare},squares=[];squares[0]=gardenSquare,$scope.garden.rows[0]=squares,$scope.resize=function(){if($scope.garden.length&&$scope.garden.width&&!($scope.garden.length<=0&&$scope.garden.width<=0)){var oldGarden=$scope.garden.rows,count=0;$scope.garden.rows=[];for(var i=0;i<$scope.garden.length;i++){for(var squares=[],j=0;j<$scope.garden.width;j++){count++;var gardenSquare={id:count,plant:emptysquare};oldGarden[i]&&oldGarden[i][j]&&(gardenSquare.plant=oldGarden[i][j].plant),squares[j]=gardenSquare}$scope.garden.rows[i]=squares}}},$scope.create=function(){var garden=new Gardens({title:this.title,width:$scope.garden.width,length:$scope.garden.length,rows:$scope.garden.rows});garden.$save(function(response){$location.path("gardens/"+response._id),$scope.title="",$scope.garden.width="",$scope.garden.length=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(garden){if(garden){garden.$remove();for(var i in $scope.gardens)$scope.gardens[i]===garden&&$scope.gardens.splice(i,1)}else $scope.garden.$remove(function(){$location.path("gardens")})},$scope.update=function(){var garden=$scope.garden;garden.$update(function(){$location.path("gardens/"+garden._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.gardens=Gardens.query()},$scope.findOne=function(){$scope.garden=Gardens.get({gardenId:$stateParams.gardenId})},$scope.dropped=function(dragPlant,dropId){for(var i=0;i<$scope.garden.length;i++)for(var j=0;j<$scope.garden.width;j++)if($scope.garden.rows[i][j].id===dropId)return void($scope.garden.rows[i][j].plant=dragPlant)}}]),angular.module("gardens").factory("Gardens",["$resource",function($resource){return $resource("gardens/:gardenId",{gardenId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);